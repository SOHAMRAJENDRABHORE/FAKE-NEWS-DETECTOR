# -*- coding: utf-8 -*-
"""Fake News Detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PhVfdz-_NQpMgeFIx8ZGOFU_TPNreS_N

**About the Dataset :**<br>
    1. id: unique id for a news article<br>
    2. title: The title of a new article<br>
    3. author: author of the news article<br>
    4. text: the text of the article<br>
    5. label: a label that marks wether the news article is real or fake<br><br>
    1: Fake News<br>
    0: Real News

Importing the dependencies
"""

import numpy as np
import pandas as pd
import re
import joblib
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

import nltk
nltk.download('stopwords')

# printing the stopwords in english
print(stopwords.words('english'))

"""Data Pre-Processing"""

# loading dataset to pandas DataFrame
news_dataset = pd.read_csv('train.csv')

news_dataset.shape

#print the first 5 rows of the DataFrame
news_dataset.head()

# counting the number of missing values in the dataset
news_dataset.isnull().sum()

#replacing missing values with empty string
news_dataset = news_dataset.fillna('')

# merging the author name and news title
news_dataset['content'] = news_dataset['author']+' '+news_dataset['title']

print(news_dataset['content'])

#seperating the data & label
X = news_dataset.drop(columns = 'label', axis=1)
Y = news_dataset['label']

print(X)
print(Y)

"""Stemming:

Stemming is the process of reducing a word to it's Root word removing all prefix and suffix.

example:
actor, actress, acting --> Root word = act
"""

port_stem = PorterStemmer()

def stemming(content):
  stemmed_content = re.sub('[^a-zA-Z]', '  ', content)
  stemmed_content = stemmed_content.lower()
  stemmed_content = stemmed_content.split()
  stemmed_content = [port_stem.stem(word) for word in stemmed_content if not word in stopwords.words('english')]
  stemmed_content = ' '.join(stemmed_content)
  return stemmed_content

news_dataset['content'] = news_dataset['content'].apply(stemming)

print(news_dataset['content'])

#seperating data and label
X = news_dataset['content'].values
Y = news_dataset['label'].values

print(X)

print(Y)

Y.shape

# converting the textual data to numerical data
vectorizer = TfidfVectorizer()
vectorizer.fit(X)

X = vectorizer.transform(X)

print(X)

"""Splitting dataset to Training and Test data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, stratify=Y, random_state=2)

"""Training the Model: Logistic Regression Model"""

model = LogisticRegression()

model.fit(X_train, Y_train)

"""Evaluation :

Accuracy score
"""

#accuracy score on the training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy score of the training data : ', training_data_accuracy)

#accuracy score on the testing data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy score of the testing data : ', test_data_accuracy)

"""Making a Predtiction System"""
num = 0
X_new = X_test[num]

prediction = model.predict(X_new)
print(prediction)

if(prediction[num] == 0):
  print("News is real")
else:
  print("News is fake")

if(prediction[num] == Y_test[num]):
  print("Prediction is true")
else:
  print("Prediction is false")

# Save the trained model
joblib.dump(model, 'fake_news_model.pkl')

# Save the vectorizer
joblib.dump(vectorizer, 'vectorizer.pkl')